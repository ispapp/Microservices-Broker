// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BidistreamerClient is the client API for Bidistreamer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BidistreamerClient interface {
	Send(ctx context.Context, opts ...grpc.CallOption) (Bidistreamer_SendClient, error)
	BidiStream(ctx context.Context, opts ...grpc.CallOption) (Bidistreamer_BidiStreamClient, error)
	Receive(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Bidistreamer_ReceiveClient, error)
}

type bidistreamerClient struct {
	cc grpc.ClientConnInterface
}

func NewBidistreamerClient(cc grpc.ClientConnInterface) BidistreamerClient {
	return &bidistreamerClient{cc}
}

func (c *bidistreamerClient) Send(ctx context.Context, opts ...grpc.CallOption) (Bidistreamer_SendClient, error) {
	stream, err := c.cc.NewStream(ctx, &Bidistreamer_ServiceDesc.Streams[0], "/base.proto.Bidistreamer/Send", opts...)
	if err != nil {
		return nil, err
	}
	x := &bidistreamerSendClient{stream}
	return x, nil
}

type Bidistreamer_SendClient interface {
	Send(*Message) error
	CloseAndRecv() (*Status, error)
	grpc.ClientStream
}

type bidistreamerSendClient struct {
	grpc.ClientStream
}

func (x *bidistreamerSendClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bidistreamerSendClient) CloseAndRecv() (*Status, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Status)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bidistreamerClient) BidiStream(ctx context.Context, opts ...grpc.CallOption) (Bidistreamer_BidiStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Bidistreamer_ServiceDesc.Streams[1], "/base.proto.Bidistreamer/BidiStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &bidistreamerBidiStreamClient{stream}
	return x, nil
}

type Bidistreamer_BidiStreamClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type bidistreamerBidiStreamClient struct {
	grpc.ClientStream
}

func (x *bidistreamerBidiStreamClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *bidistreamerBidiStreamClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bidistreamerClient) Receive(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Bidistreamer_ReceiveClient, error) {
	stream, err := c.cc.NewStream(ctx, &Bidistreamer_ServiceDesc.Streams[2], "/base.proto.Bidistreamer/Receive", opts...)
	if err != nil {
		return nil, err
	}
	x := &bidistreamerReceiveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bidistreamer_ReceiveClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type bidistreamerReceiveClient struct {
	grpc.ClientStream
}

func (x *bidistreamerReceiveClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BidistreamerServer is the server API for Bidistreamer service.
// All implementations must embed UnimplementedBidistreamerServer
// for forward compatibility
type BidistreamerServer interface {
	Send(Bidistreamer_SendServer) error
	BidiStream(Bidistreamer_BidiStreamServer) error
	Receive(*Empty, Bidistreamer_ReceiveServer) error
	mustEmbedUnimplementedBidistreamerServer()
}

// UnimplementedBidistreamerServer must be embedded to have forward compatible implementations.
type UnimplementedBidistreamerServer struct {
}

func (UnimplementedBidistreamerServer) Send(Bidistreamer_SendServer) error {
	return status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedBidistreamerServer) BidiStream(Bidistreamer_BidiStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method BidiStream not implemented")
}
func (UnimplementedBidistreamerServer) Receive(*Empty, Bidistreamer_ReceiveServer) error {
	return status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedBidistreamerServer) mustEmbedUnimplementedBidistreamerServer() {}

// UnsafeBidistreamerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BidistreamerServer will
// result in compilation errors.
type UnsafeBidistreamerServer interface {
	mustEmbedUnimplementedBidistreamerServer()
}

func RegisterBidistreamerServer(s grpc.ServiceRegistrar, srv BidistreamerServer) {
	s.RegisterService(&Bidistreamer_ServiceDesc, srv)
}

func _Bidistreamer_Send_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BidistreamerServer).Send(&bidistreamerSendServer{stream})
}

type Bidistreamer_SendServer interface {
	SendAndClose(*Status) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type bidistreamerSendServer struct {
	grpc.ServerStream
}

func (x *bidistreamerSendServer) SendAndClose(m *Status) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bidistreamerSendServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Bidistreamer_BidiStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BidistreamerServer).BidiStream(&bidistreamerBidiStreamServer{stream})
}

type Bidistreamer_BidiStreamServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type bidistreamerBidiStreamServer struct {
	grpc.ServerStream
}

func (x *bidistreamerBidiStreamServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *bidistreamerBidiStreamServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Bidistreamer_Receive_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BidistreamerServer).Receive(m, &bidistreamerReceiveServer{stream})
}

type Bidistreamer_ReceiveServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type bidistreamerReceiveServer struct {
	grpc.ServerStream
}

func (x *bidistreamerReceiveServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// Bidistreamer_ServiceDesc is the grpc.ServiceDesc for Bidistreamer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bidistreamer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "base.proto.Bidistreamer",
	HandlerType: (*BidistreamerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Send",
			Handler:       _Bidistreamer_Send_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BidiStream",
			Handler:       _Bidistreamer_BidiStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Receive",
			Handler:       _Bidistreamer_Receive_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "base.proto",
}
