/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.14.0
 * source: base.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace base.proto {
    export enum Type {
        MP4 = 0,
        MP3 = 1,
        JPG = 2,
        PNG = 3,
        JSON = 4,
        XML = 5,
        HTML = 6,
        TEXT = 7,
        OTHER = 8
    }
    export enum Event {
        STREAM = 0,
        MESSAGE = 1,
        ERROR = 2
    }
    export enum Error {
        NONE = 0,
        UNKNOWN = 1,
        INVALID_REQUEST = 2,
        SERVER_ERROR = 3
    }
    export class Identity extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            from?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
            }
        }
        get from() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set from(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            from?: string;
        }): Identity {
            const message = new Identity({});
            if (data.from != null) {
                message.from = data.from;
            }
            return message;
        }
        toObject() {
            const data: {
                from?: string;
            } = {};
            if (this.from != null) {
                data.from = this.from;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.from.length)
                writer.writeString(1, this.from);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Identity {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Identity();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.from = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Identity {
            return Identity.deserialize(bytes);
        }
    }
    export class Message extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: Uint8Array;
            type?: Type;
            seq?: dependency_1.google.protobuf.Timestamp;
            from?: string;
            to?: string;
            event?: Event;
            queue?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("seq" in data && data.seq != undefined) {
                    this.seq = data.seq;
                }
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
                if ("event" in data && data.event != undefined) {
                    this.event = data.event;
                }
                if ("queue" in data && data.queue != undefined) {
                    this.queue = data.queue;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, Type.MP4) as Type;
        }
        set type(value: Type) {
            pb_1.Message.setField(this, 2, value);
        }
        get seq() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 5) as dependency_1.google.protobuf.Timestamp;
        }
        set seq(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_seq() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get from() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set from(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get to() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set to(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get event() {
            return pb_1.Message.getFieldWithDefault(this, 8, Event.STREAM) as Event;
        }
        set event(value: Event) {
            pb_1.Message.setField(this, 8, value);
        }
        get queue() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set queue(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        static fromObject(data: {
            data?: Uint8Array;
            type?: Type;
            seq?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            from?: string;
            to?: string;
            event?: Event;
            queue?: boolean;
        }): Message {
            const message = new Message({});
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.seq != null) {
                message.seq = dependency_1.google.protobuf.Timestamp.fromObject(data.seq);
            }
            if (data.from != null) {
                message.from = data.from;
            }
            if (data.to != null) {
                message.to = data.to;
            }
            if (data.event != null) {
                message.event = data.event;
            }
            if (data.queue != null) {
                message.queue = data.queue;
            }
            return message;
        }
        toObject() {
            const data: {
                data?: Uint8Array;
                type?: Type;
                seq?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
                from?: string;
                to?: string;
                event?: Event;
                queue?: boolean;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.seq != null) {
                data.seq = this.seq.toObject();
            }
            if (this.from != null) {
                data.from = this.from;
            }
            if (this.to != null) {
                data.to = this.to;
            }
            if (this.event != null) {
                data.event = this.event;
            }
            if (this.queue != null) {
                data.queue = this.queue;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeBytes(1, this.data);
            if (this.type != Type.MP4)
                writer.writeEnum(2, this.type);
            if (this.has_seq)
                writer.writeMessage(5, this.seq, () => this.seq.serialize(writer));
            if (this.from.length)
                writer.writeString(6, this.from);
            if (this.to.length)
                writer.writeString(7, this.to);
            if (this.event != Event.STREAM)
                writer.writeEnum(8, this.event);
            if (this.queue != false)
                writer.writeBool(9, this.queue);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Message {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Message();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data = reader.readBytes();
                        break;
                    case 2:
                        message.type = reader.readEnum();
                        break;
                    case 5:
                        reader.readMessage(message.seq, () => message.seq = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    case 6:
                        message.from = reader.readString();
                        break;
                    case 7:
                        message.to = reader.readString();
                        break;
                    case 8:
                        message.event = reader.readEnum();
                        break;
                    case 9:
                        message.queue = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Message {
            return Message.deserialize(bytes);
        }
    }
    export class Status extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            message?: string;
            success?: boolean;
            error?: Error;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("message" in data && data.message != undefined) {
                    this.message = data.message;
                }
                if ("success" in data && data.success != undefined) {
                    this.success = data.success;
                }
                if ("error" in data && data.error != undefined) {
                    this.error = data.error;
                }
            }
        }
        get message() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set message(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get success() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set success(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get error() {
            return pb_1.Message.getFieldWithDefault(this, 3, Error.NONE) as Error;
        }
        set error(value: Error) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            message?: string;
            success?: boolean;
            error?: Error;
        }): Status {
            const message = new Status({});
            if (data.message != null) {
                message.message = data.message;
            }
            if (data.success != null) {
                message.success = data.success;
            }
            if (data.error != null) {
                message.error = data.error;
            }
            return message;
        }
        toObject() {
            const data: {
                message?: string;
                success?: boolean;
                error?: Error;
            } = {};
            if (this.message != null) {
                data.message = this.message;
            }
            if (this.success != null) {
                data.success = this.success;
            }
            if (this.error != null) {
                data.error = this.error;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.message.length)
                writer.writeString(1, this.message);
            if (this.success != false)
                writer.writeBool(2, this.success);
            if (this.error != Error.NONE)
                writer.writeEnum(3, this.error);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Status {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Status();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.message = reader.readString();
                        break;
                    case 2:
                        message.success = reader.readBool();
                        break;
                    case 3:
                        message.error = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Status {
            return Status.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedBrokerService {
        static definition = {
            Ping: {
                path: "/base.proto.Broker/Ping",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Identity) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Identity.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Status) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Status.deserialize(new Uint8Array(bytes))
            },
            Send: {
                path: "/base.proto.Broker/Send",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Message) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Message.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Status) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Status.deserialize(new Uint8Array(bytes))
            },
            Receive: {
                path: "/base.proto.Broker/Receive",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: Identity) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Identity.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Message) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Message.deserialize(new Uint8Array(bytes))
            },
            Cleanup: {
                path: "/base.proto.Broker/Cleanup",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: Identity) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => Identity.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: Status) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => Status.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Ping(call: grpc_1.ServerUnaryCall<Identity, Status>, callback: grpc_1.sendUnaryData<Status>): void;
        abstract Send(call: grpc_1.ServerUnaryCall<Message, Status>, callback: grpc_1.sendUnaryData<Status>): void;
        abstract Receive(call: grpc_1.ServerWritableStream<Identity, Message>): void;
        abstract Cleanup(call: grpc_1.ServerUnaryCall<Identity, Status>, callback: grpc_1.sendUnaryData<Status>): void;
    }
    export class BrokerClient extends grpc_1.makeGenericClientConstructor(UnimplementedBrokerService.definition, "Broker", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Ping: GrpcUnaryServiceInterface<Identity, Status> = (message: Identity, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Status>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Status>, callback?: grpc_1.requestCallback<Status>): grpc_1.ClientUnaryCall => {
            return super.Ping(message, metadata, options, callback);
        };
        Send: GrpcUnaryServiceInterface<Message, Status> = (message: Message, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Status>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Status>, callback?: grpc_1.requestCallback<Status>): grpc_1.ClientUnaryCall => {
            return super.Send(message, metadata, options, callback);
        };
        Receive: GrpcStreamServiceInterface<Identity, Message> = (message: Identity, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<Message> => {
            return super.Receive(message, metadata, options);
        };
        Cleanup: GrpcUnaryServiceInterface<Identity, Status> = (message: Identity, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Status>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Status>, callback?: grpc_1.requestCallback<Status>): grpc_1.ClientUnaryCall => {
            return super.Cleanup(message, metadata, options, callback);
        };
    }
}
